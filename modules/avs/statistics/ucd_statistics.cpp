/* This file is part of COVISE.

   You can use it under the terms of the GNU Lesser General Public License
   version 2.1 or later, see lgpl-2.1.txt.

 * License: LGPL 2+ */

/* mod_gen Version 1                                                     */
/* Module Name: "ucd statistics" (Output) (Subroutine)              */
/* Author: Ronald Peikert                                                */
/* Date Created: Thu Jun  7 11:53:58 2001                                */
/*                                                                       */
/* This file is automatically generated by the Module Generator (mod_gen)*/
/* Please do not modify or move the contents of this comment block as    */
/* mod_gen needs it in order to read module sources back in.             */
/*                                                                       */
/* input 0 "ucd" ucd REQUIRED                                            */
/* param 0 "status" textblock " " "" ":"                          */
/* End of Module Description Comments                                    */

#include <stdio.h>
#include <avs/avs.h>
#include <avs/port.h>
#include <avs/ucd_defs.h>

/* ----> START OF USER-SUPPLIED CODE SECTION #1 (INCLUDE FILES, GLOBAL VARIABLES)*/

using namespace std;

#include <math.h>
#include "vector"
#include "algorithm"

#include "avs_ext.h"
#include "unstructured.h"
#include "unisys.h"

static Unstructured *unst_in = NULL;

#include "statistics_impl.cpp" // ### including .cpp

/* <---- END OF USER-SUPPLIED CODE SECTION #1                            */

/* *****************************************/
/*  Module Description                     */
/* *****************************************/
int ucd_statistics_desc()
{

    int in_port, out_port, param, iresult;
    extern int ucd_statistics_compute(UCD_structure * ucd,
                                      char *component,
                                      char *status);

    AVSset_module_name("ucd statistics", MODULE_RENDER);

    /* Input Port Specifications               */
    in_port = AVScreate_input_port("ucd", "ucd", REQUIRED);

    /* Parameter Specifications                */
    param = AVSadd_parameter("component", "choice", "", "", ":");
    AVSconnect_widget(param, "choice_browser");

    param = AVSadd_parameter("status", "string_block", "", "",
                             ":");
    AVSadd_parameter_prop(param, "width", "integer", 4);
    AVSadd_parameter_prop(param, "height", "integer", 20);
    AVSconnect_widget(param, "textblock");

    AVSset_compute_proc((int (*)())ucd_statistics_compute);

    /* ----> START OF USER-SUPPLIED CODE SECTION #2 (ADDITIONAL SPECIFICATION INFO)*/
    /* <---- END OF USER-SUPPLIED CODE SECTION #2                            */
    return (1);
}

/* *****************************************/
/* Module Compute Routine                  */
/* *****************************************/
int ucd_statistics_compute(UCD_structure *ucd, char *component, char *status)
{

    /* ----> START OF USER-SUPPLIED CODE SECTION #3 (COMPUTE ROUTINE BODY)   */

    if ((ucd_findNodeCompByVeclen(ucd, 1, 0) < 0)
        && (ucd_findNodeCompByVeclen(ucd, 3, 0) < 0)
        && (ucd_findNodeCompByVeclen(ucd, 9, 0) < 0))
    {
        AVSerror("UCD must contain at least one 1-vect, 3-vect, or 9-vect component");
        return 0;
    }

    // input wrapper
    if (AVSinput_changed("ucd", 0))
    {
        if (unst_in)
            delete unst_in;
        unst_in = new Unstructured(ucd);
    }
    int comp = ucd_processCompChoice(ucd, "ucd", component, "component", -1,
                                     unst_in->getScalarNodeDataComponent());
    if (comp >= 0)
    {
        if (unst_in->getScalarNodeDataComponent() >= 0)
            unst_in->selectScalarNodeData(comp);
        else
            unst_in->selectVectorNodeData(comp);
    }

    // system wrapper
    UniSys us;

    statistics_impl(&us, unst_in, comp);

    /* <---- END OF USER-SUPPLIED CODE SECTION #3              */
    return (1);
}

/* ***********************************************************************/
/* Initialization for modules contained in this file.                    */
/* ***********************************************************************/
static int((*mod_list[])()) = {
    ucd_statistics_desc
};
#define NMODS (sizeof(mod_list) / sizeof(char *))

#ifdef __cplusplus
extern "C" // Add for C++
    {
#endif

void AVSinit_modules()
{ // Modify for C++
    AVSinit_from_module_list(mod_list, NMODS);
}

#ifdef __cplusplus
} // Add for C++
#endif

/* ----> START OF USER-SUPPLIED CODE SECTION #4 (SUBROUTINES, FUNCTIONS, UTILITY ROUTINES)*/

/* <---- END OF USER-SUPPLIED CODE SECTION #4                            */
