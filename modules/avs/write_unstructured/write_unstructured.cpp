/* mod_gen Version 1                                                     */
/* Module Name: "write unstructured" (Output) (Subroutine)              */
/* Author: Ronald Peikert                                                */
/* Date Created: Thu Jun  7 11:53:58 2001                                */
/*                                                                       */
/* This file is automatically generated by the Module Generator (mod_gen)*/
/* Please do not modify or move the contents of this comment block as    */
/* mod_gen needs it in order to read module sources back in.             */
/*                                                                       */
/* input 0 "ucd" ucd REQUIRED                                            */
/* param 0 "status" textblock " " "" ":"                          */
/* End of Module Description Comments                                    */

#include <stdio.h>
#include <avs/avs.h>
#include <avs/port.h>
#include <avs/ucd_defs.h>

/* ----> START OF USER-SUPPLIED CODE SECTION #1 (INCLUDE FILES, GLOBAL VARIABLES)*/

using namespace std;

#include <math.h>
#include "vector"
#include "algorithm"

#include "avs_ext.h"
#include "unstructured.h"
#include "unisys.h"

static Unstructured *unst_in = NULL;

#include "write_unstructured_impl.cpp" // ### including .cpp

/* <---- END OF USER-SUPPLIED CODE SECTION #1                            */

/* *****************************************/
/*  Module Description                     */
/* *****************************************/
int write_unstructured_desc()
{

    int in_port, out_port, param, iresult;
    extern int write_unstructured_compute(UCD_structure * ucd,
                                          char *file_name);

    AVSset_module_name("write unstructured", MODULE_RENDER);

    /* Input Port Specifications               */
    in_port = AVScreate_input_port("ucd", "ucd", REQUIRED);

    /* Parameter Specifications                */
    param = AVSadd_parameter("file name", "string", "", "", "");
    AVSconnect_widget(param, "browser");

    AVSset_compute_proc((int (*)())write_unstructured_compute);

    /* ----> START OF USER-SUPPLIED CODE SECTION #2 (ADDITIONAL SPECIFICATION INFO)*/
    /* <---- END OF USER-SUPPLIED CODE SECTION #2                            */
    return (1);
}

/* *****************************************/
/* Module Compute Routine                  */
/* *****************************************/
int write_unstructured_compute(UCD_structure *ucd,
                               char *file_name)
{

    /* ----> START OF USER-SUPPLIED CODE SECTION #3 (COMPUTE ROUTINE BODY)   */

    // input wrapper
    if (AVSinput_changed("ucd", 0))
    {
        if (unst_in)
            delete unst_in;
        unst_in = new Unstructured(ucd);
    }

    // system wrapper
    UniSys us;

    write_unstructured_impl(&us, unst_in, file_name);

    /* <---- END OF USER-SUPPLIED CODE SECTION #3              */
    return (1);
}

/* ***********************************************************************/
/* Initialization for modules contained in this file.                    */
/* ***********************************************************************/
static int((*mod_list[])()) = {
    write_unstructured_desc
};
#define NMODS (sizeof(mod_list) / sizeof(char *))

#ifdef __cplusplus
extern "C" // Add for C++
    {
#endif

void AVSinit_modules()
{ // Modify for C++
    AVSinit_from_module_list(mod_list, NMODS);
}

#ifdef __cplusplus
} // Add for C++
#endif

/* ----> START OF USER-SUPPLIED CODE SECTION #4 (SUBROUTINES, FUNCTIONS, UTILITY ROUTINES)*/

/* <---- END OF USER-SUPPLIED CODE SECTION #4                            */
