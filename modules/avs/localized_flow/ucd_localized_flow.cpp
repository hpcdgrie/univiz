/* mod_gen Version 1                                                     */
/* Module Name: "ucd localized flow" (Filter) (Subroutine)              */
/* Author: Filip Sadlo (AVS wrapper), Alexander Wiebel, Christoph Garth (method)          */
/* Date Created: Thu Jan  8 12:09:58 2009                                */
/*                                                                       */
/* This file is automatically generated by the Module Generator (mod_gen)*/
/* Please do not modify or move the contents of this comment block as    */
/* mod_gen needs it in order to read module sources back in.             */
/*                                                                       */
/* input 0 "ucd" ucd REQUIRED                                            */
/* param 0 "presmooth" toggle 0 0 1 */
/* output 0 "vorticity" ucd                                                */
/* output 1 "scalar" ucd                                                */
/* param 0 "quantity" radio_buttons "helicity" "helicity:vorticity mag:lambda2:z vorticity:Q:S norm:S offdiag norm:trace S (= div):S eigenvect" ":"*/
/* End of Module Description Comments                                    */
// ### to do: adapt above defs

#include <stdio.h>
#include <avs/avs.h>
#include <avs/port.h>
#include <avs/ucd_defs.h>

/* ----> START OF USER-SUPPLIED CODE SECTION #1 (INCLUDE FILES, GLOBAL VARIABLES)*/

#include <math.h>
#include "linalg.h"
#include "avs_ext.h"
#include "unstructured.h"
#include "unisys.h"

static Unstructured *unst_in = NULL;

#include "localized_flow_impl.cpp" // ### including .cpp

/* <---- END OF USER-SUPPLIED CODE SECTION #1                            */

/* *****************************************/
/*  Module Description                     */
/* *****************************************/
int ucd_localized_flow_desc()
{

    int in_port, out_port, param;
    extern int ucd_localized_flow_compute(UCD_structure * ucd,
                                          UCD_structure * *scalar,
                                          char *velocity,
                                          float *residual,
                                          int max_iter);

    AVSset_module_name("ucd localized flow", MODULE_FILTER);

    /* Input Port Specifications               */
    in_port = AVScreate_input_port("ucd", "ucd", REQUIRED);

    /* Output Port Specifications              */
    //out_port = AVScreate_output_port("vorticity", "ucd");
    out_port = AVScreate_output_port("scalar", "ucd");

    /* Parameter Specifications                */
    param = AVSadd_parameter("velocity", "choice", "", "", ":");
    AVSconnect_widget(param, "choice_browser");

    param = AVSadd_float_parameter("residual", 1e-10, 0.0, FLOAT_UNBOUND);
    AVSconnect_widget(param, "typein_real");

    param = AVSadd_parameter("max iter", "integer", 1000, 1, INT_UNBOUND);
    AVSconnect_widget(param, "typein_integer");

    AVSset_compute_proc((int (*)())ucd_localized_flow_compute);

    /* ----> START OF USER-SUPPLIED CODE SECTION #2 (ADDITIONAL SPECIFICATION INFO)*/
    /* <---- END OF USER-SUPPLIED CODE SECTION #2                            */
    return (1);
}

/* *****************************************/
/* Module Compute Routine                  */
/* *****************************************/
int ucd_localized_flow_compute(UCD_structure *ucd,
                               UCD_structure **scalar,
                               char *velocity,
                               float *residual,
                               int max_iter)
{

    /* ----> START OF USER-SUPPLIED CODE SECTION #3 (COMPUTE ROUTINE BODY)   */

    /* Allocate output UCD */
    if (*scalar && *scalar != ucd)
        UCDstructure_free(*scalar);

    UCD_structure *ucd2 = ucdClone(ucd, 1, "Potential (Localized Flow)");

    // input wrapper
    if (AVSinput_changed("ucd", 0))
    {
        if (unst_in)
            delete unst_in;
        unst_in = new Unstructured(ucd);
    }
    int compVelo = ucd_processCompChoice(ucd, "ucd", velocity, "velocity", 3,
                                         unst_in->getVectorNodeDataComponent());
    if (compVelo >= 0)
        unst_in->selectVectorNodeData(compVelo);

    // system wrapper
    UniSys us;

    // output wrappers
    Unstructured *unst_scalar = new Unstructured(ucd2);

    // compute
    localized_flow_impl(&us,
                        unst_in, compVelo,
                        unst_scalar,
                        *residual,
                        max_iter,
                        NULL);

    *scalar = ucd2;

    delete unst_scalar;

    /* <---- END OF USER-SUPPLIED CODE SECTION #3              */
    return (1);
}

/* ***********************************************************************/
/* Initialization for modules contained in this file.                    */
/* ***********************************************************************/
static int((*mod_list[])()) = {
    ucd_localized_flow_desc
};
#define NMODS (sizeof(mod_list) / sizeof(char *))

#ifdef __cplusplus
extern "C" // Add for C++
    {
#endif

void AVSinit_modules()
{ // Modify for C++
    AVSinit_from_module_list(mod_list, NMODS);
}

#ifdef __cplusplus
} // Add for C++
#endif

/* ----> START OF USER-SUPPLIED CODE SECTION #4 (SUBROUTINES, FUNCTIONS, UTILITY ROUTINES)*/

/* <---- END OF USER-SUPPLIED CODE SECTION #4                            */
