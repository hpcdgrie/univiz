/* mod_gen Version 1                                                     */
/* Module Name: "flow topo" (Mapper) (Subroutine)                          */
/* Author: Ronny Peikert and Filip Sadlo                                 */
/* Date Created: Wed Mar 22 12:34:04 2005                                */
/*                                                                       */
/* This file is automatically generated by the Module Generator (mod_gen)*/
/* Please do not modify or move the contents of this comment block as    */
/* mod_gen needs it in order to read module sources back in.             */
/*                                                                       */
/* input 0 "ucd" ucd REQUIRED                                         */
/* output 0 "critical points" field 1D 3-space 1-vector irregular float     */
/* param 0 "divide by walldist" toggle 0 0 1 */
/* param 1 "interior critical points" toggle 1 0 1 */
/* param 2 "boundary critical points" toggle 0 0 1 */
/* param 3 "generate seeds" toggle 0 0 1 */
/* param 4 "seedsPerCircle" typein_integer 8  INT_UNBOUND INT_UNBOUND        */
/* param 5 "radius" typein_real 1.00000 FLOAT_UNBOUND FLOAT_UNBOUND        */
/* param 6 "offset" typein_real 1.00000 FLOAT_UNBOUND FLOAT_UNBOUND        */

/* End of Module Description Comments                                    */

#include <stdio.h>
#include <avs/avs.h>
#include <avs/port.h>
#include <avs/field.h>
#include <avs/ucd_defs.h>

/* ----> START OF USER-SUPPLIED CODE SECTION #1 (INCLUDE FILES, GLOBAL VARIABLES)*/
#include "unstructured.h"
#include "unisys.h"

#include "unifield.h"
#include "flow_topo_impl.cpp" // ### including cpp

static Unstructured *unst = 0;

using namespace std;

/* <---- END OF USER-SUPPLIED CODE SECTION #1                            */

/* *****************************************/
/*  Module Description                     */
/* *****************************************/
int flow_topo_desc()
{

    int in_port, out_port, param;
    extern int flow_topo_compute(UCD_structure * ucd, AVSfield_float * *critical_points,
                                 char *velocity, int divide_by_walldist, char *wall_distance, int interior_critical_points, int boundary_critical_points,
                                 int generate_seeds, int seedsPerCircle, float *radius, float *offset);

    AVSset_module_name("flow topo", MODULE_MAPPER);

    /* Input Port Specifications               */
    in_port = AVScreate_input_port("ucd", "ucd", REQUIRED);

    /* Output Port Specifications              */
    out_port = AVScreate_output_port("critical points",
                                     "field 1D 3-space 1-vector irregular float");

    /* Parameter Specifications                */
    param = AVSadd_parameter("velocity", "choice", "", "", ":");
    AVSconnect_widget(param, "choice_browser");

    param = AVSadd_parameter("divide by walldist", "boolean", 0, 0, 1);
    AVSconnect_widget(param, "toggle");

    param = AVSadd_parameter("wall distance", "choice", "", "", ":");
    AVSconnect_widget(param, "choice_browser");

    param = AVSadd_parameter("interior critical points", "boolean", 1, 0, 1);
    AVSconnect_widget(param, "toggle");

    param = AVSadd_parameter("boundary critical points", "boolean", 0, 0, 1);
    AVSconnect_widget(param, "toggle");

    param = AVSadd_parameter("generate seeds", "boolean", 0, 0, 1);
    AVSconnect_widget(param, "toggle");

    param = AVSadd_parameter("seedsPerCircle", "integer", 8, INT_UNBOUND, INT_UNBOUND);
    AVSconnect_widget(param, "typein_integer");

    param = AVSadd_float_parameter("radius", 1.00000, FLOAT_UNBOUND, FLOAT_UNBOUND);
    AVSconnect_widget(param, "typein_real");

    param = AVSadd_float_parameter("offset", 1.00000, FLOAT_UNBOUND, FLOAT_UNBOUND);
    AVSconnect_widget(param, "typein_real");

    AVSset_compute_proc((int (*)())flow_topo_compute);
    /* ----> START OF USER-SUPPLIED CODE SECTION #2 (ADDITIONAL SPECIFICATION INFO)*/
    /* <---- END OF USER-SUPPLIED CODE SECTION #2                            */
    return (1);
}

/* *****************************************/
/* Module Compute Routine                  */
/* *****************************************/
int flow_topo_compute(UCD_structure *ucd, AVSfield_float **critical_points,
                      char *velocity, int divide_by_walldist, char *wall_distance,
                      int interior_critical_points, int boundary_critical_points,
                      int generate_seeds, int seedsPerCircle, float *radius, float *offset)
{

    /* ----> START OF USER-SUPPLIED CODE SECTION #3 (COMPUTE ROUTINE BODY)   */

    printf("\n");

    // setup Unstructured
    if (AVSinput_changed("ucd", 0))
    {
        if (unst)
        {
            delete unst;
        }
        unst = new Unstructured(ucd);
    }

    int compVelo = ucd_processCompChoice(ucd, "ucd", velocity, "velocity", 3,
                                         unst->getVectorNodeDataComponent());
    if (compVelo >= 0)
        unst->selectVectorNodeData(compVelo);

    int compWallDist = ucd_processCompChoice(ucd, "ucd", wall_distance,
                                             "wall distance", 1,
                                             unst->getScalarNodeDataComponent());
    if (compWallDist >= 0)
        unst->selectScalarNodeData(compWallDist);

    // setup UniField for output
    UniField *unif = new UniField((AVSfield *)*critical_points);

    // system wrapper
    UniSys us;

    // compute
    flow_topo_impl(&us, unst, compVelo, compWallDist, &unif, divide_by_walldist,
                   interior_critical_points, boundary_critical_points,
                   generate_seeds, seedsPerCircle, *radius, *offset);

    // output
    *critical_points = (AVSfield_float *)unif->getField();

    // delete field wrapper (but not the field)
    delete unif;

    /* <---- END OF USER-SUPPLIED CODE SECTION #3                            */

    return 1;
}

/* ***********************************************************************/
/* Initialization for modules contained in this file.                    */
/* ***********************************************************************/
static int((*mod_list[])()) = {
    flow_topo_desc
};
#define NMODS (sizeof(mod_list) / sizeof(char *))

extern "C" {
void AVSinit_modules()
{
    AVSinit_from_module_list(mod_list, NMODS);
}
}

/* ----> START OF USER-SUPPLIED CODE SECTION #4 (SUBROUTINES, FUNCTIONS, UTILITY ROUTINES)*/

/* <---- END OF USER-SUPPLIED CODE SECTION #4                            */
